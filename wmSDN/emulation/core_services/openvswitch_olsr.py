# vim:ts=2:expandtab:shiftwidth=2
#
#  Copyright 2013 Claudio Pisa, Andrea Detti
#
#  This file is part of wmSDN
#
#  wmSDN is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  wmSDN is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with wmSDN.  If not, see <http://www.gnu.org/licenses/>.
#

''' Openvswitch + OLSRd user-defined service.
'''

import os
import random

from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, IPv6Prefix

class OpenvswitchService(CoreService):
    ''' This is an user-defined service. 
    '''
    # a unique name is required, without spaces
    _name = "OpenvswitchService"
    # you can create your own group here
    _group = "Utility"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    #_dirs = ("/tmp/")
    _dirs = ()
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('openvswitchservice_start.sh', 'openvswitchservice_stop.sh', '.bashrc')
    # this controls the starting order vs other enabled services
    _startindex = 51
    # list of startup commands, also may be generated during startup
    _startup = ('/bin/bash openvswitchservice_start.sh',)
    # list of shutdown commands
    _shutdown = ('/bin/bash openvswitchservice_stop.sh',)

    _ipv4_routing = True
    _ipv6_routing = False

    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''
        try:
            openvswitch_dir = node.session.cfg['openvswitch_dir']
            olsr_dir = node.session.cfg['olsr_dir']
            scripts_dir = node.session.cfg['scripts_dir']
        except KeyError:
            # PLEASE SET THIS VALUES in your /etc/core/core.conf
            openvswitch_dir = "/home/user/wmSDN/openvswitch" 
            olsr_dir = "/home/user/wmSDN/olsrd/"
            scripts_dir = "/home/user/wmSDN/scripts/"

        cfg =  "#!/bin/bash\n"
        cfg += "# auto-generated by OpenvswitchService \n"
        cfg += "# source /etc/profile \n"

        if filename == cls._configs[0]: # start
                return cfg + cls.generateOpenvswitchConf(node, services, openvswitch_dir, olsr_dir, scripts_dir, start=True)
        elif filename == cls._configs[1]: # stop
                return cfg + cls.generateOpenvswitchConf(node, services, openvswitch_dir, olsr_dir, scripts_dir, start=False)
        elif filename == cls._configs[2]: # env
                return cls.generateOpenvswitchEnv(node, services, openvswitch_dir, olsr_dir, scripts_dir)
        else:
                raise ValueError
    
    @classmethod
    def generateOpenvswitchEnv(cls, node, services, openvswitch_dir, olsr_dir, scripts_dir):
            cfg = """
export OPENVSWITCH_DIR=%s
export OLSR_DIR=%s
export SCRIPTS_DIR=%s
export SHELL=/bin/bash
export HOME=$PWD
export PATH=$OPENVSWITCH_DIR/udatapath:$OPENVSWITCH_DIR/utilities:$OLSR_DIR:$OLSR_DIR/openvswitch:$PATH
export TERM=vt100
alias ls='ls --color'
export OVS_RUNDIR="$(pwd)"
export OVS_LOGDIR="$(pwd)"
alias of_flows='$OPENVSWITCH_DIR/utilities/ovs-ofctl dump-flows br0'
alias of_show='$OPENVSWITCH_DIR/utilities/ovs-ofctl show br0'
alias of_queue_stats='$OPENVSWITCH_DIR/utilities/ovs-ofctl queue-stats br0'
alias of_hidden='$OPENVSWITCH_DIR/utilities/ovs-appctl -t $HOME/ovs-vswitchd.*.ctl bridge/dump-flows br0'
mywatch () {
    while true; do
        clear;
        $@
        sleep 2;
    done
}
of_watch_active_flows () {
    while true; do
        clear;
        $OPENVSWITCH_DIR/utilities/ovs-ofctl dump-flows br0 | grep -v 'packets=0';
        sleep 2;
    done
}

of_rule_stats () { 
    while true; do 
        echo $(of_flows | wc -l) "tot |" $(of_flows | grep "cookie=.*e," | wc -l) "emer |" $(of_flows | grep "cookie=.*c," | wc -l) "ctrl |" $(of_flows | grep "cookie=.*60c," | wc -l) "gw6 |" $(of_flows | grep "cookie=.*50c," | wc -l) "gw5"; 
        sleep 1; 
    done
}


""" % (openvswitch_dir, olsr_dir, scripts_dir)
            return cfg

    @classmethod
    def generateOpenvswitchConf(cls, node, services, openvswitch_dir, olsr_dir, scripts_dir, start):
            def nodename2dpid(nodename):
                    "return an hex identifier for a switch, given a node's name"
                    try:
                            # usually the names are in the form "n<number> or gw<number>"
                            nodesnumber = int(nodename[-1])
                    except ValueError, IndexError:
                            # fallback to a random number
                            nodesnumber = random.randint(40000,80000)
                    return "%016x" % nodesnumber

            return """

export OPENVSWITCH_DIR=%s
export OLSR_DIR=%s
export SCRIPTS_DIR=%s
export DPCONNECTION="tcp:127.0.0.1:6634"
export OFDPCONNECTION="ptcp:6634"
export CONTROLLER_IP="10.100.100.100"
#export CONTROLLER_IP="10.0.0.3"
export CONTROLLER_PORT="6633"
export OLSR_TABLE="198"
export OLSR_DEFAULT_TABLE="199"

export OVS_RUNDIR="$(pwd)"
export OVS_LOGDIR="$(pwd)"

printandexec() {
    echo "$@"
    eval "$@"
}

is_gateway() {
    if [ ${HOSTNAME:0:1} == "g" ]; then
        return 0   #true
    else
        return 1   #false
    fi
}

is_hna_node() {
    if ip address show | grep "192\.168\."; then
        return 0   #true
    else
        return 1   #false
    fi
}

is_controllers_node() {
    # the node which is closest to the controller
    CTRL_PATTERN=$(echo $CONTROLLER_IP | grep -o "10\.[0-9]\{1,3\}\.[0-9]\{1,3\}")
    if ip address show | grep -F $CTRL_PATTERN; then
        return 0   #true
    else
        return 1   #false
    fi
}

start() {
    #generatedbr0mac=$(hostname | grep -o "[0-9]*" | awk '{ printf ("04:04:00:00:00:%%02x", $0) }')
    #ip link set eth0 down
    #ip link set eth0 addr $computedmacaddress
    #ip link set eth0 up
    # take eth0's IP address and compute broadcast and tap addresses
    ETH0_IP=$(ip -4 addr show dev eth0 | grep "inet " | awk '{print $2}' | cut -d "/" -f 1)
    # broadcast IP address
    BRD_IP=$(echo $ETH0_IP | awk 'BEGIN {FS="."} {print $1 "." $2 ".255.255"}')

    # we don't need no IPv6
    echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6

    # take IP addresses and delete them from the interface
    ETH_MASK=$(ip -4 addr show dev eth0 | grep "inet " | awk '{print $2}' | cut -d "/" -f 2)
    printandexec ip addr del ${ETH0_IP}/${ETH_MASK} dev eth0

    # eth0's mac
    ETH0_MAC=$( ip link sh dev eth0 | grep ether | awk '{print $2}' )


    IFACELIST=eth0
    #TODO: iterate over IFACELIST

    # start the Openvswitch daemon
    echo "starting ovs-vswitchd"
    printandexec insmod ${OPENVSWITCH_DIR}/datapath/linux/openvswitch.ko
    printandexec ${OPENVSWITCH_DIR}/ovsdb/ovsdb-tool create ./conf.db ${OPENVSWITCH_DIR}/vswitchd/vswitch.ovsschema
    printandexec ${OPENVSWITCH_DIR}/ovsdb/ovsdb-server ./conf.db --remote=punix:$(pwd)/db.sock --remote=db:Open_vSwitch,manager_options --no-chdir --unixctl=$(pwd)/ovsdb-server.sock --detach
    printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait init
    printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait add-br br0 #other-config:hwaddr=$generatedbr0mac
    #printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait set bridge br0 datapath_type=netdev
    printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait add-port br0 eth0
    #printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait -- set port eth0 qos=@newqos -- --id=@newqos create qos type=linux-htb queues:0=@newqueue -- --id=@newqueue create queue #other-config:max-rate=100000 
    printandexec nice --19 ${OPENVSWITCH_DIR}/vswitchd/ovs-vswitchd unix:$(pwd)/db.sock -vinfo --log-file=$(pwd)/ovs-vswitchd.log --no-chdir --detach

    printandexec sleep 1


    printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait set bridge br0 datapath_id=%s 
    # tune the queueing
    ######### printandexec /sbin/tc class del classid 1:1 dev eth0
    ######### printandexec /sbin/tc class add dev eth0 parent 1:fffe classid 1:1 htb rate 100Kbps
    #printandexec /sbin/tc qdisc add dev eth0 parent 1:1 pfifo limit 1000
    #printandexec ip link set br0 txqueuelen 1000
    #printandexec ip link set eth0 txqueuelen 1000

    echo "talk to the controller"
    printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait set-fail-mode br0 secure 
    printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait set-controller br0 tcp:${CONTROLLER_IP}:${CONTROLLER_PORT} 
    printandexec ${OPENVSWITCH_DIR}/utilities/ovs-vsctl --db=unix:$(pwd)/db.sock --no-wait set controller br0 connection-mode=out-of-band
    ###/secchan/ofprotocol $DPCONNECTION tcp:${CONTROLLER_IP}:${CONTROLLER_PORT} --fail=closed --out-of-band -D --listen=ptcp: --log-file="ofprotocol.log" 2>&1 
    printandexec sleep 3

    generatedbr0mac=$(hostname | grep -o "[0-9]*" | awk '{ printf ("04:04:00:00:00:%%02x", $0) }')
    printandexec ip link set br0 down
    printandexec ip link set br0 addr $generatedbr0mac

    printandexec ip addr add ${ETH0_IP}/16 brd ${BRD_IP} dev br0
    printandexec ip link set br0 up
    #printandexec ip link set br0 promisc off
    OLSR_INTERFACE="br0"
    
    printandexec iptables -A INPUT -i eth0 -j DROP
    printandexec iptables -A FORWARD -o eth0 -j DROP
    #printandexec iptables -A OUTPUT -o eth0 -j DROP
    
    # for debugging eyes only
    printandexec ip addr show

    if is_gateway; then
            printandexec ip route add 10.0.0.0/8 via 10.0.254.254 dev br0
            printandexec ip route add 192.168.0.0/16 via 10.0.254.254 dev br0
            printandexec ip neigh add 10.0.254.254 lladdr 04:0f:04:0f:04:0f dev br0
            printandexec ip route del 10.0.0.0/16 dev br0
            printandexec ip route add default dev eth1
            # limit the rate to emulate an ADSL uplink
            printandexec tc qdisc add dev eth1 parent root handle 1: htb default 1 
            printandexec tc class add dev eth1 parent 1: classid 1:1 htb rate 1Mbit
    else
            printandexec ip route add default via 10.0.254.254 dev br0
            printandexec ip neigh add 10.0.254.254 lladdr 04:0f:04:0f:04:0f dev br0
            printandexec ip route del 10.0.0.0/16 dev br0
    fi

    printandexec ln -s $SCRIPTS_DIR/o2o.sh .
    printandexec ln -s $SCRIPTS_DIR/emergency_flows.sh .
    #bash ./o2o.sh > o2o.log 2>&1 &

    #generate an olsrd.conf on the fly
    cat - > olsrd.conf << EOF
LinkQualityFishEye  0

RtTable $OLSR_TABLE
RtTableDefault $OLSR_DEFAULT_TABLE

LoadPlugin "olsrd_txtinfo.so.0.1"
{
    PlParam      "accept" "0.0.0.0"
}

LoadPlugin "olsrd_jsoninfo.so.0.0"
{
    PlParam      "port" "9090"
    PlParam      "accept" "0.0.0.0"
}

Interface "$OLSR_INTERFACE"
{
}

EOF

    if is_gateway; then
        # add a default Hna4 to olsrd.conf
        cat - >> olsrd.conf << EOF
Hna4
{
    0.0.0.0 0.0.0.0
}
EOF

        # and NAT
        # assume that the "internet interface" is eth1
        #iptables -A POSTROUTING -t nat -o eth1 -j MASQUERADE
    fi

    if is_hna_node && ! is_gateway; then
        # announce the HNA
        HNA_NET=$( ip address show | grep "192\.168\." | cut -d "/" -f 1 | awk '{print $2}' | awk -F '.' '{print $1 "." $2 "." $3 "." 0}' )
        cat - >> olsrd.conf << EOF

Hna4
{
    ${HNA_NET} 255.255.255.0
}
EOF
    fi

    if is_controllers_node ; then
        # announce the /32 HNA
        cat - >> olsrd.conf << EOF
Hna4
{
    $CONTROLLER_IP 255.255.255.255
}
EOF
    fi

    # start olsrd
    printandexec ${OLSR_DIR}/olsrd -f olsrd.conf -d 0
    sleep 2

}

stop() {
    killall olsrd
    killall ovs-vswitchd
}

$1

""" % (openvswitch_dir, olsr_dir, scripts_dir, nodename2dpid(node.name))

# this line is required to add the above class to the list of available services
addservice(OpenvswitchService)

